// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/05/2014 22:53:52"
                                                                                
// Verilog Test Bench template for design : mma_top
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module mma_top_vlg_tst();

reg clk;
reg rst_n;
reg oclk;
reg hsync_in;
reg vsync_in;
reg de_in;
reg [23:0] data_in;

wire vga_clk;
wire hsync_l;
wire vsync_l;
wire blank_n_l;
wire sync_n_l;
wire [23:0] vga_l;
wire hsync_r;
wire vsync_r;
wire blank_n_r;
wire sync_n_r;
wire [23:0] vga_r;

mma_top mma_top_tb(
				//input
				.clk(clk),
				.rst_n(rst_n),
				.oclk(oclk),
				.hsync_in(hsync_in),
				.vsync_in(vsync_in),
				.de_in(de_in),
				.data_in(data_in),
				//output
				.vga_clk(vga_clk),
				.hsync_l(hsync_l),
				.vsync_l(vsync_l),
				.blank_n_l(blank_n_l),
				.sync_n_l(sync_n_l),
				.vga_l(vga_l),
				
				.hsync_r(hsync_r),
				.vsync_r(vsync_r),
				.blank_n_r(blank_n_r),
				.sync_n_r(sync_n_r),
				.vga_r(vga_r)
			
				);
				
//clk时序
initial begin
	clk=0;
	forever #10 clk=~clk;
end

//oclk时序
initial begin
	#25;
	oclk=0;
	forever #10.4166666 oclk=~oclk;
end

//rst_n时序
initial begin
	rst_n=0;
	#1000;
	rst_n=1;
end

reg sysrst_n;
initial begin
	sysrst_n=0;
	#1500;
	sysrst_n=1;
end

reg flag;
initial begin
	flag=0;
	#3000;
	flag=1;
end

//行计数器
reg [10:0] x_cnt;
always @ (posedge oclk or negedge sysrst_n) begin
	if(!sysrst_n)
		x_cnt<=11'b0;
	else if(x_cnt>=11'd1599)
		x_cnt<=11'b0;
	else if(flag)
		x_cnt<=x_cnt+1'b1;
	else ;
end

//场计数器
reg [9:0] y_cnt;
always @ (posedge oclk or negedge sysrst_n) begin
	if(!sysrst_n)
		y_cnt<=10'd0;
	else if(y_cnt>=10'd800)
		y_cnt<=10'd0;
	else if(x_cnt>=11'd1599)
		y_cnt<=y_cnt+1'b1;
	else ;
end

//产生行同步信号
always @ (negedge oclk or negedge sysrst_n) begin
	if(!sysrst_n) 
		hsync_in<=1'b1;
	else if(flag && x_cnt>11'd0 && x_cnt<=11'd128)
		hsync_in<=1'b0;
	else 
		hsync_in<=1'b1;
end

//产生场同步信号
always @ (negedge oclk or negedge sysrst_n) begin
	if(!sysrst_n) 
		vsync_in<=1'b0;
	else if(flag && y_cnt>=10'd0 && y_cnt<10'd10)
		vsync_in<=1'b1;
	else
		vsync_in<=1'b0;
end 

//de_in时序
always @ (negedge oclk or negedge sysrst_n) begin
	if(!sysrst_n)
		de_in<=1'b0;
	else if(x_cnt>11'd288 && x_cnt<=11'd1568 && y_cnt>=11'd17 && y_cnt<11'd497)
		de_in<=1'b1;
	else
		de_in<=1'b0;
end

//data_in时序
always @ (negedge oclk or negedge sysrst_n) begin
	if(!sysrst_n)
		data_in<=24'd0;
	else if(de_in)
		data_in<=data_in+1'b1;
	else ;
end

endmodule




